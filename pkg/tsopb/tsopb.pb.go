// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tsopb.proto

package tsopb

import (
	"context"
	"fmt"
	"math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	pdpb "github.com/pingcap/kvproto/pkg/pdpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("tsopb.proto", fileDescriptor_ad96434e4f0d3c2b) }

var fileDescriptor_ad96434e4f0d3c2b = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x29, 0xce, 0x2f,
	0x48, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0xa4, 0xb8, 0x0a, 0x52, 0x60,
	0x42, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0xa6, 0x3e, 0x88, 0x05, 0x15, 0xe5, 0x2f, 0x2a,
	0x2d, 0x2e, 0x01, 0x33, 0x21, 0x02, 0x46, 0x57, 0x98, 0xb9, 0x98, 0x43, 0x82, 0xfd, 0x85, 0x1c,
	0xb9, 0xb8, 0xdc, 0x53, 0x4b, 0x7c, 0x53, 0x73, 0x93, 0x52, 0x8b, 0x8a, 0x85, 0xc4, 0xf5, 0xc0,
	0x26, 0x21, 0x44, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xa4, 0x24, 0x30, 0x25, 0x8a, 0x0b,
	0xf2, 0xf3, 0x8a, 0x53, 0x95, 0x18, 0x84, 0x0c, 0xb8, 0x98, 0x43, 0x8a, 0xf3, 0x85, 0x04, 0x20,
	0x4a, 0x42, 0x8a, 0xf3, 0x61, 0x9a, 0x04, 0x91, 0x44, 0x60, 0xaa, 0x35, 0x18, 0x0d, 0x18, 0x85,
	0xec, 0xb8, 0x38, 0x83, 0x2b, 0xf3, 0x92, 0x7d, 0x13, 0x2b, 0x42, 0x82, 0x85, 0xc4, 0x20, 0xaa,
	0xe0, 0x02, 0x30, 0xdd, 0xe2, 0x18, 0xe2, 0x70, 0x1b, 0xc3, 0xb8, 0x04, 0xdd, 0x53, 0x4b, 0x5c,
	0x9c, 0x7d, 0xf2, 0x93, 0x13, 0x4b, 0x32, 0xf3, 0xf3, 0x3c, 0xf3, 0xd2, 0xf2, 0x85, 0xe4, 0xe0,
	0x4e, 0x44, 0x95, 0x80, 0x99, 0x27, 0x8f, 0x53, 0x1e, 0x6e, 0x6e, 0x3c, 0x97, 0x48, 0x70, 0x6a,
	0x89, 0x6b, 0x45, 0x49, 0x6a, 0x51, 0x5e, 0x62, 0x4e, 0x48, 0x66, 0x6e, 0x6a, 0x71, 0x49, 0x62,
	0x6e, 0x81, 0x90, 0x22, 0xd4, 0x29, 0x58, 0xe4, 0x60, 0xa6, 0x2b, 0xe1, 0x53, 0x82, 0x6c, 0x81,
	0x3b, 0x1e, 0x0b, 0xdc, 0x09, 0x5b, 0xe0, 0x8e, 0xd7, 0x02, 0x27, 0xb5, 0x1b, 0x2b, 0x38, 0x18,
	0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5,
	0x18, 0xb8, 0x04, 0xf2, 0x8b, 0xd2, 0xf5, 0x4a, 0x32, 0xb3, 0xcb, 0xf4, 0xb2, 0xcb, 0xc0, 0xd1,
	0x9f, 0xc4, 0x06, 0xa6, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x95, 0xe6, 0x58, 0x6b, 0x4e,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TSOClient is the client API for TSO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TSOClient interface {
	// GetMembers get the member list of this cluster. It does not require the
	// cluster_id inrequest matchs the id of this cluster. If the server side
	// supports multi-tenant, this rpc only returns the cluster membership info.
	GetMembers(ctx context.Context, in *pdpb.GetMembersRequest, opts ...grpc.CallOption) (*pdpb.GetMembersResponse, error)
	Tso(ctx context.Context, opts ...grpc.CallOption) (TSO_TsoClient, error)
	SyncMaxTS(ctx context.Context, in *pdpb.SyncMaxTSRequest, opts ...grpc.CallOption) (*pdpb.SyncMaxTSResponse, error)
	GetDCLocationInfo(ctx context.Context, in *pdpb.GetDCLocationInfoRequest, opts ...grpc.CallOption) (*pdpb.GetDCLocationInfoResponse, error)
	SetExternalTimestamp(ctx context.Context, in *pdpb.SetExternalTimestampRequest, opts ...grpc.CallOption) (*pdpb.SetExternalTimestampResponse, error)
	GetExternalTimestamp(ctx context.Context, in *pdpb.GetExternalTimestampRequest, opts ...grpc.CallOption) (*pdpb.GetExternalTimestampResponse, error)
}

type tSOClient struct {
	cc *grpc.ClientConn
}

func NewTSOClient(cc *grpc.ClientConn) TSOClient {
	return &tSOClient{cc}
}

func (c *tSOClient) GetMembers(ctx context.Context, in *pdpb.GetMembersRequest, opts ...grpc.CallOption) (*pdpb.GetMembersResponse, error) {
	out := new(pdpb.GetMembersResponse)
	err := c.cc.Invoke(ctx, "/tsopb.TSO/GetMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSOClient) Tso(ctx context.Context, opts ...grpc.CallOption) (TSO_TsoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TSO_serviceDesc.Streams[0], "/tsopb.TSO/Tso", opts...)
	if err != nil {
		return nil, err
	}
	x := &tSOTsoClient{stream}
	return x, nil
}

type TSO_TsoClient interface {
	Send(*pdpb.TsoRequest) error
	Recv() (*pdpb.TsoResponse, error)
	grpc.ClientStream
}

type tSOTsoClient struct {
	grpc.ClientStream
}

func (x *tSOTsoClient) Send(m *pdpb.TsoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tSOTsoClient) Recv() (*pdpb.TsoResponse, error) {
	m := new(pdpb.TsoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tSOClient) SyncMaxTS(ctx context.Context, in *pdpb.SyncMaxTSRequest, opts ...grpc.CallOption) (*pdpb.SyncMaxTSResponse, error) {
	out := new(pdpb.SyncMaxTSResponse)
	err := c.cc.Invoke(ctx, "/tsopb.TSO/SyncMaxTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSOClient) GetDCLocationInfo(ctx context.Context, in *pdpb.GetDCLocationInfoRequest, opts ...grpc.CallOption) (*pdpb.GetDCLocationInfoResponse, error) {
	out := new(pdpb.GetDCLocationInfoResponse)
	err := c.cc.Invoke(ctx, "/tsopb.TSO/GetDCLocationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSOClient) SetExternalTimestamp(ctx context.Context, in *pdpb.SetExternalTimestampRequest, opts ...grpc.CallOption) (*pdpb.SetExternalTimestampResponse, error) {
	out := new(pdpb.SetExternalTimestampResponse)
	err := c.cc.Invoke(ctx, "/tsopb.TSO/SetExternalTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSOClient) GetExternalTimestamp(ctx context.Context, in *pdpb.GetExternalTimestampRequest, opts ...grpc.CallOption) (*pdpb.GetExternalTimestampResponse, error) {
	out := new(pdpb.GetExternalTimestampResponse)
	err := c.cc.Invoke(ctx, "/tsopb.TSO/GetExternalTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TSOServer is the server API for TSO service.
type TSOServer interface {
	// GetMembers get the member list of this cluster. It does not require the
	// cluster_id inrequest matchs the id of this cluster. If the server side
	// supports multi-tenant, this rpc only returns the cluster membership info.
	GetMembers(context.Context, *pdpb.GetMembersRequest) (*pdpb.GetMembersResponse, error)
	Tso(TSO_TsoServer) error
	SyncMaxTS(context.Context, *pdpb.SyncMaxTSRequest) (*pdpb.SyncMaxTSResponse, error)
	GetDCLocationInfo(context.Context, *pdpb.GetDCLocationInfoRequest) (*pdpb.GetDCLocationInfoResponse, error)
	SetExternalTimestamp(context.Context, *pdpb.SetExternalTimestampRequest) (*pdpb.SetExternalTimestampResponse, error)
	GetExternalTimestamp(context.Context, *pdpb.GetExternalTimestampRequest) (*pdpb.GetExternalTimestampResponse, error)
}

// UnimplementedTSOServer can be embedded to have forward compatible implementations.
type UnimplementedTSOServer struct {
}

func (*UnimplementedTSOServer) GetMembers(ctx context.Context, req *pdpb.GetMembersRequest) (*pdpb.GetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (*UnimplementedTSOServer) Tso(srv TSO_TsoServer) error {
	return status.Errorf(codes.Unimplemented, "method Tso not implemented")
}
func (*UnimplementedTSOServer) SyncMaxTS(ctx context.Context, req *pdpb.SyncMaxTSRequest) (*pdpb.SyncMaxTSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncMaxTS not implemented")
}
func (*UnimplementedTSOServer) GetDCLocationInfo(ctx context.Context, req *pdpb.GetDCLocationInfoRequest) (*pdpb.GetDCLocationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDCLocationInfo not implemented")
}
func (*UnimplementedTSOServer) SetExternalTimestamp(ctx context.Context, req *pdpb.SetExternalTimestampRequest) (*pdpb.SetExternalTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExternalTimestamp not implemented")
}
func (*UnimplementedTSOServer) GetExternalTimestamp(ctx context.Context, req *pdpb.GetExternalTimestampRequest) (*pdpb.GetExternalTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalTimestamp not implemented")
}

func RegisterTSOServer(s *grpc.Server, srv TSOServer) {
	s.RegisterService(&_TSO_serviceDesc, srv)
}

func _TSO_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pdpb.GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSOServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsopb.TSO/GetMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSOServer).GetMembers(ctx, req.(*pdpb.GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSO_Tso_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TSOServer).Tso(&tSOTsoServer{stream})
}

type TSO_TsoServer interface {
	Send(*pdpb.TsoResponse) error
	Recv() (*pdpb.TsoRequest, error)
	grpc.ServerStream
}

type tSOTsoServer struct {
	grpc.ServerStream
}

func (x *tSOTsoServer) Send(m *pdpb.TsoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tSOTsoServer) Recv() (*pdpb.TsoRequest, error) {
	m := new(pdpb.TsoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TSO_SyncMaxTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pdpb.SyncMaxTSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSOServer).SyncMaxTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsopb.TSO/SyncMaxTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSOServer).SyncMaxTS(ctx, req.(*pdpb.SyncMaxTSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSO_GetDCLocationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pdpb.GetDCLocationInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSOServer).GetDCLocationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsopb.TSO/GetDCLocationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSOServer).GetDCLocationInfo(ctx, req.(*pdpb.GetDCLocationInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSO_SetExternalTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pdpb.SetExternalTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSOServer).SetExternalTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsopb.TSO/SetExternalTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSOServer).SetExternalTimestamp(ctx, req.(*pdpb.SetExternalTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSO_GetExternalTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pdpb.GetExternalTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSOServer).GetExternalTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsopb.TSO/GetExternalTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSOServer).GetExternalTimestamp(ctx, req.(*pdpb.GetExternalTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TSO_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tsopb.TSO",
	HandlerType: (*TSOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMembers",
			Handler:    _TSO_GetMembers_Handler,
		},
		{
			MethodName: "SyncMaxTS",
			Handler:    _TSO_SyncMaxTS_Handler,
		},
		{
			MethodName: "GetDCLocationInfo",
			Handler:    _TSO_GetDCLocationInfo_Handler,
		},
		{
			MethodName: "SetExternalTimestamp",
			Handler:    _TSO_SetExternalTimestamp_Handler,
		},
		{
			MethodName: "GetExternalTimestamp",
			Handler:    _TSO_GetExternalTimestamp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tso",
			Handler:       _TSO_Tso_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tsopb.proto",
}
